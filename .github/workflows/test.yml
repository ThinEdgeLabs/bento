permissions:
  contents: read
on:
  push:
    branches: [main]
  pull_request:
# Spend CI time only on latest ref: https://github.com/jonhoo/rust-ci-conf/pull/5
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true
name: test
jobs:
  required:
    runs-on: ubuntu-latest
    name: ubuntu / ${{ matrix.toolchain }}
    strategy:
      matrix:
        toolchain: [stable, beta]

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: postgres
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: Install ${{ matrix.toolchain }}
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.toolchain }}
      - name: cargo generate-lockfile
        if: hashFiles('Cargo.lock') == ''
        run: cargo generate-lockfile
      # https://twitter.com/jonhoo/status/1571290371124260865
      - name: Install Diesel CLI
        run: cargo install diesel_cli --no-default-features --features postgres
      - name: Create Test DBs
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/bento_test
        run: |
          diesel database setup
          diesel migration run
      - name: cargo test --locked
        run: cargo test --locked --all-features --all-targets
      # https://github.com/rust-lang/cargo/issues/6669
      - name: cargo test --doc
        run: cargo test --locked --all-features --doc
  # minimal:
  #   runs-on: ubuntu-latest
  #   name: ubuntu / stable / minimal-versions
  #   steps:
  #     - uses: actions/checkout@v4
  #       with:
  #         submodules: true
  #     - name: Install stable
  #       uses: dtolnay/rust-toolchain@stable
  #     - name: Install nightly for -Zminimal-versions
  #       uses: dtolnay/rust-toolchain@nightly
  #     - name: rustup default stable
  #       run: rustup default stable
  #     - name: cargo update -Zminimal-versions
  #       run: cargo +nightly update -Zminimal-versions
  #     - name: cargo test
  #       run: cargo test --locked --all-features --all-targets
  # os-check:
  #   runs-on: ${{ matrix.os }}
  #   name: ${{ matrix.os }} / stable
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       os: [macos-latest, windows-latest]
  #   steps:
  #     # if your project needs OpenSSL, uncommment this to fix Windows builds.
  #     # it's commented out by default as tthe install command takes 5-10m.
  #     # - run: echo "VCPKG_ROOT=$env:VCPKG_INSTALLATION_ROOT" | Out-File -FilePath $env:GITHUB_ENV -Append
  #     #   if: runner.os == 'Windows'
  #     # - run: vcpkg install openssl:x64-windows-static-md
  #     #   if: runner.os == 'Windows'
  #     - uses: actions/checkout@v4
  #       with:
  #         submodules: true
  #     - name: Install stable
  #       uses: dtolnay/rust-toolchain@stable
  #     - name: cargo generate-lockfile
  #       if: hashFiles('Cargo.lock') == ''
  #       run: cargo generate-lockfile
  #     - name: cargo test
  #       run: cargo test --locked --all-features --all-targets

  # coverage:
  #   runs-on: ubuntu-latest
  #   name: ubuntu / stable / coverage
  #   steps:
  #     - uses: actions/checkout@v4
  #       with:
  #         submodules: true
  #     - name: Install stable
  #       uses: dtolnay/rust-toolchain@stable
  #       with:
  #         components: llvm-tools-preview
  #     - name: cargo install cargo-llvm-cov
  #       uses: taiki-e/install-action@cargo-llvm-cov
  #     - name: cargo generate-lockfile
  #       if: hashFiles('Cargo.lock') == ''
  #       run: cargo generate-lockfile
  #     - name: cargo llvm-cov
  #       run: cargo llvm-cov --locked --all-features --lcov --output-path lcov.info
  #     - name: Upload to codecov.io
  #       uses: codecov/codecov-action@v3
  #       with:
  #         fail_ci_if_error: true
